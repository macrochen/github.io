<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[My Notes]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-03-05T10:35:36.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Macro Chen]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[做一个maven插件练练手]]></title>
    <link href="http://yoursite.com/2016/03/05/bean-type-maven-plugin/"/>
    <id>http://yoursite.com/2016/03/05/bean-type-maven-plugin/</id>
    <published>2016-03-05T10:33:12.000Z</published>
    <updated>2016-03-05T10:35:36.000Z</updated>
    <content type="html"><![CDATA[<p>最近做的一个maven小插件</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Strings;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.ImmutableSet;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> com.google.common.reflect.ClassPath;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.maven.plugin.AbstractMojo;</span><br><span class="line"><span class="keyword">import</span> org.apache.maven.plugin.MojoExecutionException;</span><br><span class="line"><span class="keyword">import</span> org.apache.maven.plugins.annotations.LifecyclePhase;</span><br><span class="line"><span class="keyword">import</span> org.apache.maven.plugins.annotations.Mojo;</span><br><span class="line"><span class="keyword">import</span> org.apache.maven.plugins.annotations.Parameter;</span><br><span class="line"><span class="keyword">import</span> org.apache.maven.plugins.annotations.ResolutionScope;</span><br><span class="line"><span class="keyword">import</span> org.apache.maven.project.MavenProject;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassReader;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.Type;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.tree.AnnotationNode;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.tree.ClassNode;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.tree.FieldNode;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.tree.MethodNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 将BeanType注解替换成Named注解</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@author</span> macrochen</span><br><span class="line"> * <span class="doctag">@since</span> 16/2/17</span><br><span class="line"> */</span></span><br><span class="line"><span class="meta">@Mojo</span>(name = <span class="string">"beanType"</span>, defaultPhase = LifecyclePhase.PROCESS_CLASSES,</span><br><span class="line">		requiresDependencyResolution = ResolutionScope.COMPILE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanTypeMojo</span> <span class="keyword">extends</span> <span class="title">AbstractMojo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Parameter</span>(defaultValue = <span class="string">"$&#123;project.build.outputDirectory&#125;"</span>, required = <span class="keyword">true</span>)</span><br><span class="line">	<span class="keyword">private</span> File outputDirectory;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 扫描指定的包, 避免将整个classpath下的class都扫一遍, 如果有多个包, 用分号(;)分隔, 而且会扫描指定包的下级子包</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="meta">@Parameter</span>(defaultValue = <span class="string">"$&#123;beanType.scanPackage&#125;"</span>, required = <span class="keyword">true</span>)</span><br><span class="line">	<span class="keyword">private</span> String scanPackage;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Parameter</span>(defaultValue = <span class="string">"$&#123;project&#125;"</span>, readonly = <span class="keyword">true</span>)</span><br><span class="line">	<span class="keyword">private</span> MavenProject project;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span><br><span class="line">			<span class="keyword">throws</span> MojoExecutionException </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ClassLoader classloader = getClassLoader(project);<span class="comment">//Thread.currentThread().getContextClassLoader()</span></span><br><span class="line">			List&lt;ClassPath.ClassInfo&gt; list = getClasses(classloader);</span><br><span class="line">			<span class="keyword">for</span> (ClassPath.ClassInfo classInfo : list) &#123;</span><br><span class="line">				String s = classInfo.getName();</span><br><span class="line"></span><br><span class="line">				getLog().info(<span class="string">"read class file: "</span> + s);</span><br><span class="line"></span><br><span class="line">				modify(classloader, s);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			getLog().error(<span class="string">"replace failure"</span>, e);</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> MojoExecutionException(e.getMessage(), e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(ClassLoader classloader, String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// 更新内部类, 如果有的话</span></span><br><span class="line">		modifyInnerClass(classloader, s);</span><br><span class="line"></span><br><span class="line">		ClassNode cn = createClassNode(classloader, s);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 没修改不更新字节码</span></span><br><span class="line">		<span class="keyword">if</span> (!doModify(cn)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 输出到class文件</span></span><br><span class="line">		output(s, cn);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">(String s, ClassNode cn)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		s = outputDirectory.getAbsolutePath() + <span class="string">"/"</span> + s.replace(<span class="string">"."</span>, <span class="string">"/"</span>) + <span class="string">".class"</span>;</span><br><span class="line"></span><br><span class="line">		FileUtils.writeByteArrayToFile(<span class="keyword">new</span> File(s), getByteArray(cn));</span><br><span class="line">		getLog().info(<span class="string">"replace "</span> + s + <span class="string">" is over"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> ClassNode <span class="title">createClassNode</span><span class="params">(ClassLoader classloader, String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		ClassReader cr = <span class="keyword">new</span> ClassReader(classloader.getResourceAsStream(s.replace(<span class="string">'.'</span>, <span class="string">'/'</span>) + <span class="string">".class"</span>));</span><br><span class="line">		ClassNode cn = <span class="keyword">new</span> ClassNode();</span><br><span class="line">		cr.accept(cn, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">return</span> cn;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">modifyInnerClass</span><span class="params">(ClassLoader classloader, String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Class&lt;?&gt; clazz = Class.forName(s, <span class="keyword">true</span>, classloader);</span><br><span class="line">		Class&lt;?&gt;[] innserClasses = clazz.getDeclaredClasses();</span><br><span class="line">		<span class="keyword">if</span> (innserClasses != <span class="keyword">null</span> &amp;&amp; innserClasses.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (Class&lt;?&gt; innserClass : innserClasses) &#123;</span><br><span class="line">				modify(classloader, innserClass.getName());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">byte</span>[] getByteArray(ClassNode cn) &#123;</span><br><span class="line">		ClassWriter cw = <span class="keyword">new</span> ClassWriter(<span class="number">0</span>);</span><br><span class="line">		cn.accept(cw);</span><br><span class="line">		<span class="keyword">return</span> cw.toByteArray();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> List&lt;ClassPath.ClassInfo&gt; getClasses(ClassLoader classloader) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		List&lt;ClassPath.ClassInfo&gt; list = Lists.newArrayList();</span><br><span class="line">		<span class="keyword">if</span> (Strings.isNullOrEmpty(scanPackage)) <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"scanPackage not be assigned."</span>);</span><br><span class="line">		String[] packages = scanPackage.split(<span class="string">";"</span>);</span><br><span class="line">		<span class="keyword">for</span> (String aPackage : packages) &#123;</span><br><span class="line">			ImmutableSet&lt;ClassPath.ClassInfo&gt; classes = ClassPath.from(classloader).getTopLevelClassesRecursive(aPackage);</span><br><span class="line">			list.addAll(classes);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> list;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 获取目标类库中的类加载器。目标类库就是指运行此插件的工程。</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClassLoader <span class="title">getClassLoader</span><span class="params">(MavenProject project)</span> <span class="keyword">throws</span> MojoExecutionException </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			List&lt;String&gt; classpathElements = project.getCompileClasspathElements();</span><br><span class="line">			classpathElements.add(project.getBuild().getOutputDirectory());</span><br><span class="line">			URL[] urls = <span class="keyword">new</span> URL[classpathElements.size()];</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; classpathElements.size(); ++i) &#123;</span><br><span class="line">				urls[i] = <span class="keyword">new</span> File(classpathElements.get(i)).toURI().toURL();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> URLClassLoader(urls, contextClassLoader);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> MojoExecutionException(<span class="string">"无法创建目标工程的类加载器"</span>, e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doModify</span><span class="params">(ClassNode cn)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">boolean</span> modified1 = forClass(cn);</span><br><span class="line">		<span class="keyword">boolean</span> modified2 = forMethods(cn);</span><br><span class="line">		<span class="keyword">boolean</span> modified3 = forFields(cn);</span><br><span class="line">		<span class="keyword">return</span> modified1 || modified2 || modified3;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">forClass</span><span class="params">(ClassNode cn)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">		List&lt;AnnotationNode&gt; va = cn.visibleAnnotations;</span><br><span class="line">		<span class="keyword">if</span> (va != <span class="keyword">null</span> &amp;&amp; !va.isEmpty()) &#123;</span><br><span class="line">			Iterator&lt;AnnotationNode&gt; iterator = va.iterator();</span><br><span class="line">			<span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">				AnnotationNode node = iterator.next();</span><br><span class="line">				<span class="keyword">if</span> (isBeanType(node)) &#123;</span><br><span class="line">					<span class="comment">//getLog().info("find class: " + cn.name + " with beanType");</span></span><br><span class="line">					modified = <span class="keyword">true</span>;</span><br><span class="line">					iterator.remove();</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (modified) &#123;</span><br><span class="line">				String className = cn.name.replace(<span class="string">"/"</span>, <span class="string">"."</span>);</span><br><span class="line">				addNamedNode(va, className);</span><br><span class="line">				va.add(<span class="keyword">new</span> AnnotationNode(<span class="string">"Lorg/springframework/stereotype/Component;"</span>));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> modified;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addNamedNode</span><span class="params">(List&lt;AnnotationNode&gt; va, String className)</span> </span>&#123;</span><br><span class="line">		AnnotationNode node = <span class="keyword">new</span> AnnotationNode(<span class="string">"Ljavax/inject/Named;"</span>);</span><br><span class="line">		node.values = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">		node.values.add(<span class="string">"value"</span>);</span><br><span class="line">		node.values.add(className);</span><br><span class="line">		va.add(node);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBeanType</span><span class="params">(AnnotationNode node)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Lcom/macrochen/annotations/BeanType;"</span>.equals(node.desc);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">forMethods</span><span class="params">(ClassNode cn)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">boolean</span> exist = <span class="keyword">false</span>;</span><br><span class="line">		List&lt;MethodNode&gt; methods = cn.methods;</span><br><span class="line">		<span class="keyword">for</span> (MethodNode mn : methods) &#123;</span><br><span class="line">			List&lt;AnnotationNode&gt; list = mn.visibleAnnotations;</span><br><span class="line">			<span class="keyword">if</span> (list == <span class="keyword">null</span> || list.isEmpty()) <span class="keyword">continue</span>;</span><br><span class="line">			Iterator&lt;AnnotationNode&gt; it = list.iterator();</span><br><span class="line">			String clazzName = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">				AnnotationNode node = it.next();</span><br><span class="line">				<span class="keyword">if</span> (isBeanType(node)) &#123;</span><br><span class="line">					List&lt;Object&gt; values = node.values;</span><br><span class="line">					<span class="keyword">if</span> (values == <span class="keyword">null</span> || values.isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"beanType value is empty!"</span>);</span><br><span class="line"></span><br><span class="line">					<span class="comment">//getLog().info("find method: " + mn.name + " with beanType");</span></span><br><span class="line"></span><br><span class="line">					clazzName = ((Type) values.get(<span class="number">1</span>)).getClassName();</span><br><span class="line">					it.remove();</span><br><span class="line"></span><br><span class="line">					exist = <span class="keyword">true</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (clazzName != <span class="keyword">null</span>) &#123;</span><br><span class="line">				addNamedNode(list, clazzName);</span><br><span class="line">				list.add(<span class="keyword">new</span> AnnotationNode(<span class="string">"Ljavax/inject/Inject;"</span>));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> exist;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">forFields</span><span class="params">(ClassNode cn)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">boolean</span> exist = <span class="keyword">false</span>;</span><br><span class="line">		List&lt;FieldNode&gt; methods = cn.fields;</span><br><span class="line">		<span class="keyword">for</span> (FieldNode fn : methods) &#123;</span><br><span class="line">			List&lt;AnnotationNode&gt; list = fn.visibleAnnotations;</span><br><span class="line">			<span class="keyword">if</span> (list == <span class="keyword">null</span> || list.isEmpty()) <span class="keyword">continue</span>;</span><br><span class="line">			Iterator&lt;AnnotationNode&gt; it = list.iterator();</span><br><span class="line">			String clazzName = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">				AnnotationNode node = it.next();</span><br><span class="line">				<span class="keyword">if</span> (isBeanType(node)) &#123;</span><br><span class="line">					List&lt;Object&gt; values = node.values;</span><br><span class="line">					<span class="keyword">if</span> (values == <span class="keyword">null</span> || values.isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"beanType value is empty!"</span>);</span><br><span class="line"></span><br><span class="line">					<span class="comment">//getLog().info("find method: " + fn.name + " with beanType");</span></span><br><span class="line"></span><br><span class="line">					clazzName = ((Type) values.get(<span class="number">1</span>)).getClassName();</span><br><span class="line">					it.remove();</span><br><span class="line"></span><br><span class="line">					exist = <span class="keyword">true</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (clazzName != <span class="keyword">null</span>) &#123;</span><br><span class="line">				addNamedNode(list, clazzName);</span><br><span class="line">				list.add(<span class="keyword">new</span> AnnotationNode(<span class="string">"Ljavax/inject/Inject;"</span>));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> exist;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近做的一个maven小插件</p>]]>
    
    </summary>
    
      <category term="maven" scheme="http://yoursite.com/tags/maven/"/>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[制作maven archetype的一些tips]]></title>
    <link href="http://yoursite.com/2016/03/05/maven-archetype-tips/"/>
    <id>http://yoursite.com/2016/03/05/maven-archetype-tips/</id>
    <published>2016-03-05T10:30:00.000Z</published>
    <updated>2016-03-05T10:36:13.000Z</updated>
    <content type="html"><![CDATA[<p>主要针对maven 2.x版本, 不确定3.x版本还有类似的问题.</p>
<ul>
<li><p>对于archetype-metadata.xml文件中的requiredProperties来说, <strong>maven是按照字母顺序来读取属性的, 所以要注意property之间的依赖关系, 但是maven内置的属性又是按照groupId, artifactId, version的顺序来读取</strong></p>
</li>
<li><p>对于fileSet来说:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fileSet</span> <span class="attr">filtered</span>=<span class="string">"true"</span> <span class="attr">packaged</span>=<span class="string">"true"</span> <span class="attr">encoding</span>=<span class="string">"GBK"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.java<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><code>filtered=&quot;true&quot;</code>表示使用velocity template engine来解析(会针对${xxx}的内容进行替换), <code>packaged=&quot;true&quot;</code>表示是否将对应的文件放置于包路径下, 也就是前面requiredProperty中定义的package属性(这个是maven系统默认的一个属性)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要针对maven 2.x版本, 不确定3.x版本还有类似的问题.</p>
<ul>
<li><p>对于archetype-metadata.xml文件中的requiredProperties来说, <strong>maven是按照字母顺序来读取属性的, 所以要注意prop]]>
    </summary>
    
      <category term="maven" scheme="http://yoursite.com/tags/maven/"/>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在velocity template中优雅的获取当前时间]]></title>
    <link href="http://yoursite.com/2016/03/05/get-current-date-in-velocity-template/"/>
    <id>http://yoursite.com/2016/03/05/get-current-date-in-velocity-template/</id>
    <published>2016-03-05T10:18:18.000Z</published>
    <updated>2016-03-05T10:14:46.000Z</updated>
    <content type="html"><![CDATA[<p>这个灵感主要来源stackoverflow上的一个回答…</p>
<a id="more"></a>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#set( $str = "" )</span><br><span class="line">#set( $dt = $str.getClass().forName("java.util.Date").newInstance() )</span><br><span class="line">#set( $y = $dt.year + 1900 )</span><br><span class="line">#set( $m = $dt.month )</span><br><span class="line">#set( $d = $dt.date )</span><br><span class="line">$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>这个灵感主要来源stackoverflow上的一个回答…</p>]]>
    
    </summary>
    
      <category term="velocity" scheme="http://yoursite.com/tags/velocity/"/>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一个小巧方便的java反射工具]]></title>
    <link href="http://yoursite.com/2016/03/05/reflect-tools/"/>
    <id>http://yoursite.com/2016/03/05/reflect-tools/</id>
    <published>2016-03-05T09:45:18.000Z</published>
    <updated>2016-03-05T10:01:20.000Z</updated>
    <content type="html"><![CDATA[<p>对lukas eder写的reflect做了一些扩展, 使其更强大, 满足自己的使用场景.</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Copyright (c) 2011-2012, Lukas Eder, lukas.eder@gmail.com</span><br><span class="line"> * All rights reserved.</span><br><span class="line"> *</span><br><span class="line"> * This software is licensed to you under the Apache License, Version 2.0</span><br><span class="line"> * (the "License"); You may obtain a copy of the License at</span><br><span class="line"> *</span><br><span class="line"> *   http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"> *</span><br><span class="line"> * Redistribution and use in source and binary forms, with or without</span><br><span class="line"> * modification, are permitted provided that the following conditions are met:</span><br><span class="line"> *</span><br><span class="line"> * . Redistributions of source code must retain the above copyright notice, this</span><br><span class="line"> *   list of conditions and the following disclaimer.</span><br><span class="line"> *</span><br><span class="line"> * . Redistributions in binary form must reproduce the above copyright notice,</span><br><span class="line"> *   this list of conditions and the following disclaimer in the documentation</span><br><span class="line"> *   and/or other materials provided with the distribution.</span><br><span class="line"> *</span><br><span class="line"> * . Neither the name "jOOR" nor the names of its contributors may be</span><br><span class="line"> *   used to endorse or promote products derived from this software without</span><br><span class="line"> *   specific prior written permission.</span><br><span class="line"> *</span><br><span class="line"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</span><br><span class="line"> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</span><br><span class="line"> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</span><br><span class="line"> * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE</span><br><span class="line"> * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR</span><br><span class="line"> * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF</span><br><span class="line"> * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS</span><br><span class="line"> * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN</span><br><span class="line"> * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)</span><br><span class="line"> * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span><br><span class="line"> * POSSIBILITY OF SUCH DAMAGE.</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *</span><br><span class="line"> * 为了满足自己的需求, 支持对私有属性和方法进行反射, 包括一直向上父类查找方法或属性, 因为完全暴露了方法和属性, 谨慎使用</span><br><span class="line"> *</span><br><span class="line"> * A wrapper for an &#123;<span class="doctag">@link</span> Object&#125; or &#123;<span class="doctag">@link</span> Class&#125; upon which reflective calls</span><br><span class="line"> * can be made.</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * An example of using &lt;code&gt;Reflect&lt;/code&gt; is &lt;code&gt;&lt;pre&gt;</span><br><span class="line"> * // Static import all reflection methods to decrease verbosity</span><br><span class="line"> * import static org.joor.Reflect.*;</span><br><span class="line"> *</span><br><span class="line"> * // Wrap an Object / Class / class name with the on() method:</span><br><span class="line"> * on("java.lang.String")</span><br><span class="line"> * // Invoke constructors using the create() method:</span><br><span class="line"> * .create("Hello World")</span><br><span class="line"> * // Invoke methods using the call() method:</span><br><span class="line"> * .call("toString")</span><br><span class="line"> * // Retrieve the wrapped object</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@author</span> Lukas Eder</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reflect</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(Reflect.class);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Param</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">		Class&lt;?&gt; type;</span><br><span class="line">		T value;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Param</span><span class="params">(String name, T value)</span> </span>&#123;</span><br><span class="line">			Class&lt;?&gt; type = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				type = Class.forName(name);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"class name:"</span> + name, e);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>.type = type;</span><br><span class="line">			<span class="keyword">this</span>.value = value;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Param</span><span class="params">(Class&lt;?&gt; type, T value)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">super</span>();</span><br><span class="line">			<span class="keyword">this</span>.type = type;</span><br><span class="line">			<span class="keyword">this</span>.value = value;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> Param&lt;T&gt; <span class="title">type</span><span class="params">(Class&lt;?&gt; type)</span></span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.type = type;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> Param&lt;T&gt; <span class="title">value</span><span class="params">(T value)</span></span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.value = value;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// ---------------------------------------------------------------------</span></span><br><span class="line">	<span class="comment">// Static API used as entrance points to the fluent API</span></span><br><span class="line">	<span class="comment">// ---------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Wrap a class name.</span><br><span class="line">	 * &lt;p&gt;</span><br><span class="line">	 * This is the same as calling &lt;code&gt;on(Class.forName(name))&lt;/code&gt;</span><br><span class="line">	 *</span><br><span class="line">	 * <span class="doctag">@param</span> name A fully qualified class name</span><br><span class="line">	 * <span class="doctag">@return</span> A wrapped class object, to be used for further reflection.</span><br><span class="line">	 * </span><br><span class="line">	 * <span class="doctag">@see</span> #on(Class)</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Reflect <span class="title">on</span><span class="params">(String name)</span>  </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> on(forName(name));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**根据类名称构造实例*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Reflect <span class="title">instance</span><span class="params">(String name)</span>  </span>&#123;</span><br><span class="line">		Object o;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			o = forName(name).newInstance();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> on(o);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Wrap a class.</span><br><span class="line">	 * &lt;p&gt;</span><br><span class="line">	 * Use this when you want to access static fields and methods on a</span><br><span class="line">	 * &#123;<span class="doctag">@link</span> Class&#125; object, or as a basis for constructing objects of that</span><br><span class="line">	 * class using &#123;<span class="doctag">@link</span> #create(Object...)&#125;</span><br><span class="line">	 *</span><br><span class="line">	 * <span class="doctag">@param</span> clazz The class to be wrapped</span><br><span class="line">	 * <span class="doctag">@return</span> A wrapped class object, to be used for further reflection.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Reflect <span class="title">on</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Reflect(clazz);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Wrap an object.</span><br><span class="line">	 * &lt;p&gt;</span><br><span class="line">	 * Use this when you want to access instance fields and methods on any</span><br><span class="line">	 * &#123;<span class="doctag">@link</span> Object&#125;</span><br><span class="line">	 *</span><br><span class="line">	 * <span class="doctag">@param</span> object The object to be wrapped</span><br><span class="line">	 * <span class="doctag">@return</span> A wrapped object, to be used for further reflection.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Reflect <span class="title">on</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Reflect(object);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Conveniently render an &#123;<span class="doctag">@link</span> java.lang.reflect.AccessibleObject&#125; accessible</span><br><span class="line">	 *</span><br><span class="line">	 * <span class="doctag">@param</span> accessible The object to render accessible</span><br><span class="line">	 * <span class="doctag">@return</span> The argument object rendered accessible</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends AccessibleObject&gt; <span class="function">T <span class="title">accessible</span><span class="params">(T accessible)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (accessible == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!accessible.isAccessible()) &#123;</span><br><span class="line">			accessible.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> accessible;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ---------------------------------------------------------------------</span></span><br><span class="line">	<span class="comment">// Members</span></span><br><span class="line">	<span class="comment">// ---------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * The wrapped object</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Object  object;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * A flag indicating whether the wrapped object is a &#123;<span class="doctag">@link</span> Class&#125; (for</span><br><span class="line">	 * accessing static fields and methods), or any other type of &#123;<span class="doctag">@link</span> Object&#125;</span><br><span class="line">	 * (for accessing instance fields and methods).</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> isClass;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// ---------------------------------------------------------------------</span></span><br><span class="line">	<span class="comment">// Constructors</span></span><br><span class="line">	<span class="comment">// ---------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Reflect</span><span class="params">(Class&lt;?&gt; type)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.object = type;</span><br><span class="line">		<span class="keyword">this</span>.isClass = <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> &lt;T&gt; Reflect(T object) &#123;</span><br><span class="line">		<span class="keyword">this</span>.object = object;</span><br><span class="line">		<span class="keyword">this</span>.isClass = <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ---------------------------------------------------------------------</span></span><br><span class="line">	<span class="comment">// Fluent Reflection API</span></span><br><span class="line">	<span class="comment">// ---------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Get the wrapped object</span><br><span class="line">	 *</span><br><span class="line">	 * <span class="doctag">@param</span> &lt;T&gt; A convenience generic parameter for automatic unsafe casting</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">	<span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (T) object;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Set a field value.</span><br><span class="line">	 * &lt;p&gt;</span><br><span class="line">	 * This is roughly equivalent to &#123;<span class="doctag">@link</span> java.lang.reflect.Field#set(Object, Object)&#125;. If the</span><br><span class="line">	 * wrapped object is a &#123;<span class="doctag">@link</span> Class&#125;, then this will set a value to a static</span><br><span class="line">	 * member field. If the wrapped object is any other &#123;<span class="doctag">@link</span> Object&#125;, then</span><br><span class="line">	 * this will set a value to an instance member field.</span><br><span class="line">	 *</span><br><span class="line">	 * <span class="doctag">@param</span> name The field name</span><br><span class="line">	 * <span class="doctag">@param</span> value The new field value</span><br><span class="line">	 * <span class="doctag">@return</span> The same wrapped object, to be used for further reflection.</span><br><span class="line">	 * </span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Reflect <span class="title">set</span><span class="params">(String name, <span class="keyword">final</span> Object value)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> doExecute(name, <span class="keyword">new</span> Executor() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> Reflect <span class="title">execute</span><span class="params">(Field field)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">				field.set(object, unwrap(value));</span><br><span class="line">				<span class="keyword">return</span> on(object);</span><br><span class="line">			&#125;&#125;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Get a field value.</span><br><span class="line">	 * &lt;p&gt;</span><br><span class="line">	 * This is roughly equivalent to &#123;<span class="doctag">@link</span> java.lang.reflect.Field#get(Object)&#125;. If the wrapped</span><br><span class="line">	 * object is a &#123;<span class="doctag">@link</span> Class&#125;, then this will get a value from a static</span><br><span class="line">	 * member field. If the wrapped object is any other &#123;<span class="doctag">@link</span> Object&#125;, then</span><br><span class="line">	 * this will get a value from an instance member field.</span><br><span class="line">	 * &lt;p&gt;</span><br><span class="line">	 * If you want to "navigate" to a wrapped version of the field, use</span><br><span class="line">	 * &#123;<span class="doctag">@link</span> #field(String)&#125; instead.</span><br><span class="line">	 *</span><br><span class="line">	 * <span class="doctag">@param</span> name The field name</span><br><span class="line">	 * <span class="doctag">@return</span> The field value</span><br><span class="line">	 * </span><br><span class="line">	 * <span class="doctag">@see</span> #field(String)</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">get</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> field(name).&lt;T&gt;get();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">interface</span> <span class="title">Executor</span></span>&#123;</span><br><span class="line">		<span class="function">Reflect <span class="title">execute</span><span class="params">(Field field)</span><span class="keyword">throws</span> Exception</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Get a wrapped field.</span><br><span class="line">	 * &lt;p&gt;</span><br><span class="line">	 * This is roughly equivalent to &#123;<span class="doctag">@link</span> java.lang.reflect.Field#get(Object)&#125;. If the wrapped</span><br><span class="line">	 * object is a &#123;<span class="doctag">@link</span> Class&#125;, then this will wrap a static member field. If</span><br><span class="line">	 * the wrapped object is any other &#123;<span class="doctag">@link</span> Object&#125;, then this wrap an</span><br><span class="line">	 * instance member field.</span><br><span class="line">	 *</span><br><span class="line">	 * <span class="doctag">@param</span> name The field name</span><br><span class="line">	 * <span class="doctag">@return</span> The wrapped field</span><br><span class="line">	 * </span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Reflect <span class="title">field</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> doExecute(name, <span class="keyword">new</span> Executor() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> Reflect <span class="title">execute</span><span class="params">(Field field)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">				<span class="keyword">return</span> on(field.get(object));</span><br><span class="line">			&#125;&#125;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Reflect <span class="title">doExecute</span><span class="params">(String name, Executor executor)</span> </span>&#123;</span><br><span class="line">		Class&lt;?&gt; useClazz = type();</span><br><span class="line">		Field field = <span class="keyword">null</span>;</span><br><span class="line">		do &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				field = useClazz.getDeclaredField(name);</span><br><span class="line">				field = accessible(field);</span><br><span class="line">				<span class="keyword">return</span> executor.execute(field);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">				<span class="comment">//</span></span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"class:"</span> + useClazz + <span class="string">", name:"</span> + name, e);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (field == <span class="keyword">null</span>) &#123;</span><br><span class="line">				useClazz = useClazz.getSuperclass();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">while</span> (useClazz != <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"don't execute on field["</span> + name + <span class="string">"]"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Get a Map containing field names and wrapped values for the fields'</span><br><span class="line">	 * values.</span><br><span class="line">	 * &lt;p&gt;</span><br><span class="line">	 * If the wrapped object is a &#123;<span class="doctag">@link</span> Class&#125;, then this will return static</span><br><span class="line">	 * fields. If the wrapped object is any other &#123;<span class="doctag">@link</span> Object&#125;, then this will</span><br><span class="line">	 * return instance fields.</span><br><span class="line">	 * &lt;p&gt;</span><br><span class="line">	 * These two calls are equivalent &lt;code&gt;&lt;pre&gt;</span><br><span class="line">	 * on(object).field("myField");</span><br><span class="line">	 * on(object).fields().get("myField");</span><br><span class="line">	 * &lt;/pre&gt;&lt;/code&gt;</span><br><span class="line">	 *</span><br><span class="line">	 * <span class="doctag">@return</span> A map containing field names and wrapped values.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Map&lt;String, Reflect&gt; <span class="title">fields</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Map&lt;String, Reflect&gt; result = <span class="keyword">new</span> LinkedHashMap&lt;String, Reflect&gt;();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (Field field : type().getFields()) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!isClass ^ Modifier.isStatic(field.getModifiers())) &#123;</span><br><span class="line">				String name = field.getName();</span><br><span class="line">				result.put(name, field(name));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Call a method by its name.</span><br><span class="line">	 * &lt;p&gt;</span><br><span class="line">	 * This is a convenience method for calling</span><br><span class="line">	 * &lt;code&gt;call(name, new Object[0])&lt;/code&gt;</span><br><span class="line">	 *</span><br><span class="line">	 * <span class="doctag">@param</span> name The method name</span><br><span class="line">	 * <span class="doctag">@return</span> The wrapped method result or the same wrapped object if the</span><br><span class="line">	 *         method returns &lt;code&gt;void&lt;/code&gt;, to be used for further</span><br><span class="line">	 *         reflection.</span><br><span class="line">	 * </span><br><span class="line">	 * <span class="doctag">@see</span> #call(String, Object...)</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Reflect <span class="title">call</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> call(name, <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Call a method by its name.</span><br><span class="line">	 * &lt;p&gt;</span><br><span class="line">	 * This is roughly equivalent to &#123;<span class="doctag">@link</span> java.lang.reflect.Method#invoke(Object, Object...)&#125;.</span><br><span class="line">	 * If the wrapped object is a &#123;<span class="doctag">@link</span> Class&#125;, then this will invoke a static</span><br><span class="line">	 * method. If the wrapped object is any other &#123;<span class="doctag">@link</span> Object&#125;, then this will</span><br><span class="line">	 * invoke an instance method.</span><br><span class="line">	 * &lt;p&gt;</span><br><span class="line">	 * Just like &#123;<span class="doctag">@link</span> java.lang.reflect.Method#invoke(Object, Object...)&#125;, this will try to wrap</span><br><span class="line">	 * primitive types or unwrap primitive type wrappers if applicable. If</span><br><span class="line">	 * several methods are applicable, by that rule, the first one encountered</span><br><span class="line">	 * is called. i.e. when calling &lt;code&gt;&lt;pre&gt;</span><br><span class="line">	 * on(...).call("method", 1, 1);</span><br><span class="line">	 * &lt;/pre&gt;&lt;/code&gt; The first of the following methods will be called:</span><br><span class="line">	 * &lt;code&gt;&lt;pre&gt;</span><br><span class="line">	 * public void method(int param1, Integer param2);</span><br><span class="line">	 * public void method(Integer param1, int param2);</span><br><span class="line">	 * public void method(Number param1, Number param2);</span><br><span class="line">	 * public void method(Number param1, Object param2);</span><br><span class="line">	 * public void method(int param1, Object param2);</span><br><span class="line">	 * &lt;/pre&gt;&lt;/code&gt;</span><br><span class="line">	 *</span><br><span class="line">	 * <span class="doctag">@param</span> name The method name</span><br><span class="line">	 * <span class="doctag">@param</span> args The method arguments</span><br><span class="line">	 * <span class="doctag">@return</span> The wrapped method result or the same wrapped object if the</span><br><span class="line">	 *         method returns &lt;code&gt;void&lt;/code&gt;, to be used for further</span><br><span class="line">	 *         reflection.</span><br><span class="line">	 * </span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Reflect <span class="title">call</span><span class="params">(String name, Object... args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//return doCall(name, types(args), args);</span></span><br><span class="line">		Class&lt;?&gt;[] types;</span><br><span class="line">		Object[] values = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (args == <span class="keyword">null</span>) &#123;</span><br><span class="line">			types = <span class="keyword">new</span> Class[<span class="number">0</span>];</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			types = <span class="keyword">new</span> Class[args.length];</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">				Object arg = args[i];</span><br><span class="line">				types[i] = (arg <span class="keyword">instanceof</span> Param) ? ((Param)arg).type : arg.getClass();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			values = <span class="keyword">new</span> Object[args.length];</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">				Object arg = args[i];</span><br><span class="line">				values[i] = (arg <span class="keyword">instanceof</span> Param) ? ((Param)arg).value : arg;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> doCall(name, types, values);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Param&lt;T&gt; <span class="title">param</span><span class="params">(Class&lt;?&gt; type, T value)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Param&lt;T&gt;(type, value);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Reflect <span class="title">doCall</span><span class="params">(String name, Class&lt;?&gt;[] types, Object[] values)</span> </span>&#123;</span><br><span class="line">		Class&lt;?&gt; clazz = type();</span><br><span class="line">		Method method = <span class="keyword">null</span>;</span><br><span class="line">		do &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				method = clazz.getDeclaredMethod(name, types);</span><br><span class="line">				<span class="keyword">return</span> on(method, object, values);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">				logger.warn(<span class="string">"class:"</span> + clazz.getName() + <span class="string">", mehtod:"</span> + name + <span class="string">"("</span> + Arrays.toString(types) + <span class="string">")"</span>, e);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"class:"</span> + clazz.getName() + <span class="string">", method:"</span> + name + <span class="string">"("</span> + Arrays.toString(types) + <span class="string">")"</span>, e);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (method == <span class="keyword">null</span>) &#123;</span><br><span class="line">				clazz = clazz.getSuperclass();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">while</span> (clazz != <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"don't execute the method "</span> + type() + <span class="string">"."</span> + name + <span class="string">"("</span> + Arrays.toString(values) + <span class="string">")"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Call a constructor.</span><br><span class="line">	 * &lt;p&gt;</span><br><span class="line">	 * This is a convenience method for calling</span><br><span class="line">	 * &lt;code&gt;create(new Object[0])&lt;/code&gt;</span><br><span class="line">	 *</span><br><span class="line">	 * <span class="doctag">@return</span> The wrapped new object, to be used for further reflection.</span><br><span class="line">	 * </span><br><span class="line">	 * <span class="doctag">@see</span> #create(Object...)</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Reflect <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> create(<span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Call a constructor.</span><br><span class="line">	 * &lt;p&gt;</span><br><span class="line">	 * This is roughly equivalent to &#123;<span class="doctag">@link</span> java.lang.reflect.Constructor#newInstance(Object...)&#125;.</span><br><span class="line">	 * If the wrapped object is a &#123;<span class="doctag">@link</span> Class&#125;, then this will create a new</span><br><span class="line">	 * object of that class. If the wrapped object is any other &#123;<span class="doctag">@link</span> Object&#125;,</span><br><span class="line">	 * then this will create a new object of the same type.</span><br><span class="line">	 * &lt;p&gt;</span><br><span class="line">	 * Just like &#123;<span class="doctag">@link</span> java.lang.reflect.Constructor#newInstance(Object...)&#125;, this will try to</span><br><span class="line">	 * wrap primitive types or unwrap primitive type wrappers if applicable. If</span><br><span class="line">	 * several constructors are applicable, by that rule, the first one</span><br><span class="line">	 * encountered is called. i.e. when calling &lt;code&gt;&lt;pre&gt;</span><br><span class="line">	 * on(C.class).create(1, 1);</span><br><span class="line">	 * &lt;/pre&gt;&lt;/code&gt; The first of the following constructors will be applied:</span><br><span class="line">	 * &lt;code&gt;&lt;pre&gt;</span><br><span class="line">	 * public C(int param1, Integer param2);</span><br><span class="line">	 * public C(Integer param1, int param2);</span><br><span class="line">	 * public C(Number param1, Number param2);</span><br><span class="line">	 * public C(Number param1, Object param2);</span><br><span class="line">	 * public C(int param1, Object param2);</span><br><span class="line">	 * &lt;/pre&gt;&lt;/code&gt;</span><br><span class="line">	 *</span><br><span class="line">	 * <span class="doctag">@param</span> args The constructor arguments</span><br><span class="line">	 * <span class="doctag">@return</span> The wrapped new object, to be used for further reflection.</span><br><span class="line">	 * </span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Reflect <span class="title">create</span><span class="params">(Object... args)</span> </span>&#123;</span><br><span class="line">		Class&lt;?&gt;[] types = types(args);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> doCreate(types, args);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Reflect <span class="title">create</span><span class="params">(Param&lt;?&gt;... args)</span> </span>&#123;</span><br><span class="line">		Class&lt;?&gt;[] types = <span class="keyword">null</span>;</span><br><span class="line">		Object[] values = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (args == <span class="keyword">null</span>) &#123;</span><br><span class="line">			types = <span class="keyword">new</span> Class[<span class="number">0</span>];</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			types = <span class="keyword">new</span> Class[args.length];</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">				types[i] = args[i].type;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			values = <span class="keyword">new</span> Object[args.length];</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">				values[i] = args[i].value;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> doCreate(types, values);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Reflect <span class="title">doCreate</span><span class="params">(Class&lt;?&gt;[] types, Object... args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// Try invoking the "canonical" constructor, i.e. the one with exact</span></span><br><span class="line">		<span class="comment">// matching argument types</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Constructor&lt;?&gt; constructor = type().getConstructor(types);</span><br><span class="line">			<span class="keyword">return</span> on(constructor, args);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// If there is no exact match, try to find one that has a "similar"</span></span><br><span class="line">		<span class="comment">// signature if primitive argument types are converted to their wrappers</span></span><br><span class="line">		<span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">			<span class="keyword">for</span> (Constructor&lt;?&gt; constructor : type().getDeclaredConstructors()) &#123;</span><br><span class="line">				<span class="keyword">if</span> (match(constructor.getParameterTypes(), types)) &#123;</span><br><span class="line">					<span class="keyword">return</span> on(constructor, args);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Create a proxy for the wrapped object allowing to typesafely invoke</span><br><span class="line">	 * methods on it using a custom interface</span><br><span class="line">	 *</span><br><span class="line">	 * <span class="doctag">@param</span> proxyType The interface type that is implemented by the proxy</span><br><span class="line">	 * <span class="doctag">@return</span> A proxy for the wrapped object</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">	<span class="keyword">public</span> &lt;P&gt; <span class="function">P <span class="title">as</span><span class="params">(Class&lt;P&gt; proxyType)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">final</span> InvocationHandler handler = <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">				<span class="keyword">return</span> on(object).call(method.getName(), args).get();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> (P) Proxy.newProxyInstance(proxyType.getClassLoader(), <span class="keyword">new</span> Class[] &#123; proxyType &#125;, handler);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ---------------------------------------------------------------------</span></span><br><span class="line">	<span class="comment">// Object API</span></span><br><span class="line">	<span class="comment">// ---------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Check whether two arrays of types match, converting primitive types to</span><br><span class="line">	 * their corresponding wrappers.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(Class&lt;?&gt;[] declaredTypes, Class&lt;?&gt;[] actualTypes)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (declaredTypes.length == actualTypes.length) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; actualTypes.length; i++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (!wrapper(declaredTypes[i]).isAssignableFrom(wrapper(actualTypes[i]))) &#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * &#123;<span class="doctag">@inheritDoc</span>&#125;</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> object.hashCode();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * &#123;<span class="doctag">@inheritDoc</span>&#125;</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Reflect) &#123;</span><br><span class="line">			<span class="keyword">return</span> object.equals(((Reflect) obj).get());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * &#123;<span class="doctag">@inheritDoc</span>&#125;</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> object.toString();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ---------------------------------------------------------------------</span></span><br><span class="line">	<span class="comment">// Utility methods</span></span><br><span class="line">	<span class="comment">// ---------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Wrap an object created from a constructor</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Reflect <span class="title">on</span><span class="params">(Constructor&lt;?&gt; constructor, Object... args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			constructor = accessible(constructor);</span><br><span class="line">			<span class="keyword">return</span> on(constructor.newInstance(args));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Wrap an object returned from a method</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Reflect <span class="title">on</span><span class="params">(Method method, Object object, Object... args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			accessible(method);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (method.getReturnType() == <span class="keyword">void</span>.class) &#123;</span><br><span class="line">				method.invoke(object, args);</span><br><span class="line">				<span class="keyword">return</span> on(object);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> on(method.invoke(object, args));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Unwrap an object</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">unwrap</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (object <span class="keyword">instanceof</span> Reflect) &#123;</span><br><span class="line">			<span class="keyword">return</span> ((Reflect) object).get();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> object;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Get an array of types for an array of objects</span><br><span class="line">	 *</span><br><span class="line">	 * <span class="doctag">@see</span> Object#getClass()</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt;[] types(Object... values) &#123;</span><br><span class="line">		<span class="keyword">if</span> (values == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Class[<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Class&lt;?&gt;[] result = <span class="keyword">new</span> Class[values.length];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">			result[i] = values[i].getClass();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Load a class</span><br><span class="line">	 *</span><br><span class="line">	 * <span class="doctag">@see</span> Class#forName(String)</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; forName(String name) &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> Class.forName(name);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Get the type of the wrapped object.</span><br><span class="line">	 *</span><br><span class="line">	 * <span class="doctag">@see</span> Object#getClass()</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> Class&lt;?&gt; type() &#123;</span><br><span class="line">		<span class="keyword">if</span> (isClass) &#123;</span><br><span class="line">			<span class="keyword">return</span> (Class&lt;?&gt;) object;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> object.getClass();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Get a wrapper type for a primitive type, or the argument type itself, if</span><br><span class="line">	 * it is not a primitive type.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; wrapper(Class&lt;?&gt; type) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">boolean</span>.class == type) &#123;</span><br><span class="line">			<span class="keyword">return</span> Boolean.class;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">int</span>.class == type) &#123;</span><br><span class="line">			<span class="keyword">return</span> Integer.class;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">long</span>.class == type) &#123;</span><br><span class="line">			<span class="keyword">return</span> Long.class;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">short</span>.class == type) &#123;</span><br><span class="line">			<span class="keyword">return</span> Short.class;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">byte</span>.class == type) &#123;</span><br><span class="line">			<span class="keyword">return</span> Byte.class;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">double</span>.class == type) &#123;</span><br><span class="line">			<span class="keyword">return</span> Double.class;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">float</span>.class == type) &#123;</span><br><span class="line">			<span class="keyword">return</span> Float.class;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">char</span>.class == type) &#123;</span><br><span class="line">			<span class="keyword">return</span> Character.class;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> type;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>对lukas eder写的reflect做了一些扩展, 使其更强大, 满足自己的使用场景.</p>]]>
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="reflection" scheme="http://yoursite.com/tags/reflection/"/>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[spring bean 缓存实现]]></title>
    <link href="http://yoursite.com/2016/03/05/cache-spring-bean/"/>
    <id>http://yoursite.com/2016/03/05/cache-spring-bean/</id>
    <published>2016-03-05T08:27:32.000Z</published>
    <updated>2016-03-05T08:27:32.000Z</updated>
    <content type="html"><![CDATA[<p>如何自定义缓存spring bean<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBeanHolder</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> ConcurrentHashMap&lt;String, Object&gt; cachedBeans = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">7000</span>);</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext context)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">		SpringBeanHolder.context = context;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nonnull</span> <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> NullPointerException</span>&#123;</span><br><span class="line">		T bean = getBeanMaybeNull(beanName);</span><br><span class="line">		<span class="keyword">if</span> (bean == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"bean["</span> + beanName + <span class="string">"] is not exist in spring container"</span>);</span><br><span class="line">		<span class="keyword">return</span> bean;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">	<span class="meta">@Nullable</span> <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBeanMaybeNull</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">		notEmpty(beanName, beanName + <span class="string">" bean name is required"</span>);</span><br><span class="line"></span><br><span class="line">		checkState(context != <span class="keyword">null</span>, <span class="string">"spring application context is not injected"</span>);</span><br><span class="line"></span><br><span class="line">		T bean = (T) cachedBeans.get(beanName);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (bean == <span class="keyword">null</span>) &#123;</span><br><span class="line">			bean = cache(beanName, (T) context.getBean(beanName));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> bean;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">cache</span><span class="params">(String beanName, T exist)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (exist == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">		T bean = (T) cachedBeans.putIfAbsent(beanName, exist);</span><br><span class="line">		<span class="keyword">if</span> (bean == <span class="keyword">null</span>) &#123;</span><br><span class="line">			bean = exist;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> bean;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;?&gt; beanType)</span> </span>&#123;</span><br><span class="line">		String clazzName = beanType.getName();</span><br><span class="line">		T bean = getBeanMaybeNull(clazzName);</span><br><span class="line">		<span class="keyword">if</span> (bean == <span class="keyword">null</span>) &#123; <span class="comment">// 对于非注入的类, 直接new...</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				bean = (T) beanType.newInstance();</span><br><span class="line">				cache(clazzName, bean);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"cannot get instance from class:"</span> + clazzName, e);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> bean;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如何自定义缓存spring bean<br>]]>
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2016/03/05/hello-world/"/>
    <id>http://yoursite.com/2016/03/05/hello-world/</id>
    <published>2016-03-05T05:19:53.000Z</published>
    <updated>2016-03-05T05:19:53.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.]]>
    </summary>
    
  </entry>
  
</feed>
